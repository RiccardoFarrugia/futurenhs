
@using MvcForum.Web.Application.ExtensionMethods
@model MvcForum.Web.ViewModels.Topic.CreateEditTopicViewModel
@using MvcForum.Web.ViewModels.Shared

@{
    var count = 0;
    const string displayNone = "style=\"display: none;\"";
    ViewBag.ImageUploadType = Model.OptionalPermissions.CanInsertImages ? "forumimageinsert" : "image";    
}

<fieldset class="c-fieldset">
    <legend class="c-fieldset_legend">
        <h2>
        @ViewBag.Title
        </h2>
    </legend>

    @Html.HiddenFor(x => x.TopicId)
    @Html.HiddenFor(x => x.Group)
    @if (Model.IsTopicStarter)
    {
        <div class="c-form-group">
            @Html.LabelFor(model => model.Name, new { @class = "c-label" })
            @* TODO conditionally display on error. ID needs to be the input id with -error appended. class names on group and input need to be added conditionally on error too - see fedtest for implementation
            <span class="c-error-message" id="MODEL.NAME-error">
                <span class="u-visually-hidden">Error:</span> @Html.ValidationMessageFor(model => model.Name)
            </span>
            *@
            @Html.TextBoxFor(model => model.Name, new { @class = "c-input"})
        </div>
    }
    else
    {

        @Html.HiddenFor(x => x.Name)
    }


    <div class="c-form-group">
        @Html.LabelFor(model => model.Content, new { @class = "c-label" })
        @* TODO conditionally display on error. ID needs to be the input id with -error appended. class names on group and input need to be added conditionally on error too - see fedtest for implementation
            <span class="c-error-message" id="MODEL.NAME-error">
                <span class="u-visually-hidden">Error:</span> @Html.ValidationMessageFor(model => model.Content)
            </span>
        *@
        @Html.EditorFor(model => model.Content)
    </div>
        
    @*
    @if (Model.IsTopicStarter)
    {
        <div class="c-grid-block">
            <div class="c-grid-block_item l-col-12 topicGroup">
                
                @if (Model.Id == Guid.Empty)
                {
                    <div class="form-group createuploadfiles" @Html.Raw(Model.OptionalPermissions.CanUploadFiles ? "" : displayNone)>
                        @Html.LabelFor(x => x.Files)
                        <div class="input-group">
                            <span class="input-group-btn">
                                <span class="btn btn-default btn-file">
                                    @Html.LanguageString("Post.Browse") <input type="file" name="files" id="Files" multiple="multiple" value="">
                                </span>
                            </span>
                            <label for="fileReadOnly" class="u-hidden">File Name</label>
                            <input id="fileReadOnly" type="text" class="form-control" readonly="">
                        </div>
                        @Html.ValidationMessageFor(x => x.Files)
                    </div>
                }
            </div>
        </div>
    }
    *@
        

    <button type="submit" class="c-button u-fright">
        @if (Model.Id == Guid.Empty)
        {
            @Html.LanguageString("Topic.CreateDiscussion")
        }
        else
        {
            @Html.LanguageString("Post.Edit")
        }
    </button>

    <a href="#" class="c-button c-button--outline">
        Cancel
    </a>
    @*
    @if (Model.IsTopicStarter)
    {
        <div class="checkbox createsticky" @Html.Raw(Model.OptionalPermissions.CanStickyTopic ? "" : displayNone)>
            @using (Html.BeginLabelFor(m => m.IsSticky, new { @class = "checkbox" }))
            {
                @Html.CheckBoxFor(m => m.IsSticky)
            }
            @Html.ValidationMessageFor(m => m.IsSticky)
        </div>
        <div class="checkbox createlocked" @Html.Raw(Model.OptionalPermissions.CanLockTopic ? "" : displayNone)>
            @using (Html.BeginLabelFor(m => m.IsLocked, new { @class = "checkbox" }))
            {
                @Html.CheckBoxFor(m => m.IsLocked)
            }
            @Html.ValidationMessageFor(m => m.IsLocked)
        </div>
    }
    *@

    @Html.HiddenFor(x => x.IsPostEdit)
</fieldset>
    
