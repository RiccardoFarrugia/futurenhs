@using MvcForum.Core.ExtensionMethods
@using MvcForum.Web.Application.ExtensionMethods
@using MvcForum.Web.ViewModels.Post
@model PostViewModel
@using MvcForum.Web.ViewModels.Shared
@using System.Text.RegularExpressions

@{
	var postId = Model.Post.Id;
	var loggedOnUserId = Html.CurrentMember() != null ? Html.CurrentMember().Id : Guid.Empty;
	var isAdmin = User.IsInRole(Constants.AdminRoleName);
	var downVotes = Model.Votes.Where(x => x.Amount < 0).ToList();
	var upVotes = Model.Votes.Where(x => x.Amount > 0).ToList();
}
<div class="c-card_replies-item">
    <a id="@postId"></a>
    <div class="c-card c-card--reply u-border-left-theme-8">
        <div class="c-card_content">
            <div class="c-card_header">
                <div class="c-card_header-img">
                    <div class="c-avatar c-avatar--small">
                        <div class="c-avatar_fallback">
                            <p class="c-avatar_initials u-text-bold" aria-hidden="true">@Html.DisplayFor(x => Model.Post.User.Initials)</p>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.Post.User.Avatar))
                        {
                            <img role="presentation" class="c-avatar_image" src="@Model.Post.User.MemberImage(ForumConfiguration.Instance.GravatarPostSize)" alt="Avatar image of member: @Model.Post.User.FirstName @Model.Post.User.Surname">
                        }
                    </div>
                </div>
                <div class="c-card_header-content u-text-theme-7">
                    <p class="u-text-small u-text-bold u-has-subheading u-text-theme-8">
                        <a href="@Html.Raw(Model.Post.User.NiceUrl)">@Model.Post.User.FirstName @Model.Post.User.Surname</a>
                    </p>
                    <p class="u-text-small u-text-bold">@DatesUi.GetPrettyDate(Model.Post.DateCreated.ToString())</p>
                </div>
            </div>
            <p class="c-card_quote u-text-bold u-text-theme-7">
                @if (Model.ReplyingTo != null)
                {
                    // This is awful but not much else I can do, this logic ideally needs to be dealt with in the DB or DAL/Repository
                    var strippedText = Regex.Replace(Model.ReplyingTo.PostContent, @"<[^>]*>", String.Empty);
                    var splitText = strippedText.Split(' ');
                    @Html.Raw($"Reply to {Model.ReplyingTo.User.FirstName} {Model.ReplyingTo.User.Surname} “{string.Join(" ", splitText.Take(5))} {(splitText.Count() > 5 ? "..." : "")}”");
                }
            </p>
            <p class="c-card_description">
                @Html.Raw(Model.Post.PostContent.ConvertPostContent())
            </p>
            <div class="c-card_footer">
                <p class="c-card_footer-item">
                    <a href="#" class="u-text-theme-7">
                        @{Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-like-fill", "c-card_footer-icon u-fill-theme-5"));}
                        <span>@upVotes.Count.KiloFormat() likes</span>
                    </a>
                </p>
                @if (Html.CurrentMember() != null && Model.Post.User.Id != loggedOnUserId && !Model.Post.IsTopicStarter)
                {
                    <p class="c-card_footer-item u-text-theme-10">
                        <a href="?reply=@Model.Post.Id&p=@Model.PageIndex#createpost" class="u-text-theme-8">
                            @{ Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-reply", "c-card_footer-icon u-fill-theme-8")); }
                            <span>
                                Reply
                            </span>
                        </a>
                    </p>
                }
            </div>
        </div>
    </div>
</div>
