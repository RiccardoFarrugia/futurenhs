@import "../variables/colours";
@import "../variables/variables";

$is-ie: false !default;
$ie-version: 20 !default;
$print-style: false !default;
$no-js-style: false !default;

@mixin ie-lte($version) {

    @if $is-ie {
        @if $ie-version <= $version {
            @content;
        }
    }
}

@mixin ie($version) {

    @if $is-ie {
        @if $ie-version == $version {
            @content;
        }
    }
}

// Prevent long urls and text from breaking layouts
// [originally from perishablepress.com](http://perishablepress.com/press/2010/06/01/wrapping-content/)
@mixin force-wrap {
  white-space: pre;           // CSS 2.0
  white-space: pre-wrap;      // CSS 2.1
  white-space: pre-line;      // CSS 3.0
  white-space: -pre-wrap;     // Opera 4-6
  white-space: -o-pre-wrap;   // Opera 7
  white-space: -moz-pre-wrap; // Mozilla
  white-space: -hp-pre-wrap;  // HP Printers
  word-wrap: break-word;      // IE 5+
}

@mixin print() {
    @if $print-style {
        @content;
    }
}

@mixin nojs() {
    @if $no-js-style {
        @content;
    }
}

// Media queries

@mixin respond-to($media) {
    @if $is-ie {

        @content;

    }
    @else {

        @if $media == mobile {
            @media screen and (max-width: $break-point-mobile-max) {
                @content;
            }
        }

        @if $media == mobile-large {
            @media screen and (min-width: $break-point-large-mobile) {
                @content;
            }
        }

        @if $media == tablet {
            @media screen and (min-width: $break-point-tablet) {
                @content;
            }
        }

        @if $media == max-desktop {
            @media screen and (max-width: $break-point-desktop) {
                @content;
            }
        }

        @if $media == max-large-desktop {
            @media screen and (max-width: $break-point-large-desktop) {
                @content;
            }
        }
        
        @if $media == desktop {
            @media screen and (min-width: $break-point-desktop) {
                @content;
            }
        }

        @if $media == desktop-large {
            @media screen and (min-width: $break-point-large-desktop) {
                @content;
            }
        }

    }
}

@mixin font-face($font-family, $font-filename, $font-weight: normal, $font-style: normal, $font-stretch: normal) {
    @font-face {
        font-family: '#{$font-family}';
        src: url('#{$font-filename}.eot'); /* IE9 Compat Modes */
        src: url('#{$font-filename}.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
        url('#{$font-filename}.woff') format('woff'), /* Modern Browsers */
        url('#{$font-filename}.ttf') format('truetype');
        font-display: swap;
    }
}
$font-poppins-regular: 'Poppins-Regular', Arial, sans-serif !default;
$font-poppins-bold: 'Poppins-Bold', Arial, sans-serif !default;
$font-verveine-regular: 'Verveine-Regular', 'Lucida handwriting', sans-serif !default;

@mixin font-family-poppins-regular {
    font-family: $font-poppins-regular;
    font-style: normal;
    font-weight: normal;
}

@mixin font-family-poppins-bold {
    font-family: $font-poppins-bold;
    font-style: normal;
    font-weight: normal;
}

@mixin font-family-verveine-regular {
    font-family: $font-verveine-regular;
    font-style: normal;
    font-weight: 400;
}

@mixin clearfix() {

    &:before,
    &:after {
        content: "";
        display: table;
        width: 0;
    }

    &:after {
        clear: both;
    }
    
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius; // Chrome 4.0, Safari 3.1 to 4.0, Mobile Safari 3.2, Android Browser 2.1
    -moz-border-radius: $radius; // Firefox 2.0 to 3.6
    border-radius: $radius;
}

@mixin box-shadow($shadow) {
    -webkit-box-shadow: $shadow; // Chrome 4.0 to 9.0, Safari 3.1 to 5.0, Mobile Safari 3.2 to 4.3, Android Browser 2.1 to 3.0
    -moz-box-shadow: $shadow; // Firefox 3.5 to 3.6
    box-shadow: $shadow;
}

@mixin scale($x, $y, $transform-origin: 50% 50% 0) {
    // $x and $y should be numeric values without units
    -webkit-transform: scale($x, $y); // Still in use now, started at: Chrome 4.0, Safari 3.1, Mobile Safari 3.2, Android 2.1
    -moz-transform: scale($x, $y); // Firefox 3.5 to 15.0
    -ms-transform: scale($x, $y); // IE9 only
    transform: scale($x, $y);
    -webkit-transform-origin: $transform-origin; // Chrome, Safari 3.1
    -moz-transform-origin: $transform-origin; // Firefox 10 to 15.0
    -ms-transform-origin: $transform-origin; // IE9
    transform-origin: $transform-origin;
}

@mixin translate($x, $y) {
    -webkit-transform: translate($x, $y); // Still in use now, started at: Chrome 4.0, Safari 3.1, Mobile Safari 3.2, Android 2.1
    -moz-transform: translate($x, $y); // Firefox 3.5 to 15.0
    -ms-transform: translate($x, $y); // IE9 only
    -o-transform: translate($x, $y); // Opera 10.5 to 12.0
    transform: translate($x, $y);
}

@mixin gradient($from, $to) {
    // Creates a vertical gradient where $from is the colour at the top of the element
    // and $to is the colour at the bottom. The top colour is used as a background-color
    // for browsers that don't support gradients.
    background-color: $from;
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to)); // Safari 4.0 to 5.1, Chrome 1.0 to 10.0, old deprecated syntax
    background-image: -webkit-linear-gradient($from, $to); // Chrome 10.0 to 25.0, Safari 5.1 to 6.0, Mobile Safari 5.0 to 6.1, Android Browser 4.0 to 4.3
    background-image: -moz-linear-gradient($from, $to); // Firefox 3.6 to 15.0
    background-image: -o-linear-gradient($from, $to); // Opera 11.1 to 12.0
    background-image: linear-gradient($from, $to);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=0 ); // IE6 to IE9
}

@mixin transition($property, $duration, $function, $delay: 0s) {
    -webkit-transition: ($property $duration $function $delay); // Chrome 4.0 to 25.0, Safari 3.1 to 6.0, Mobile Safari 3.2 to 6.1, Android Browser 2.1 to 4.3
    -moz-transition: ($property $duration $function $delay); // Firefox 4.0 to 15.0
    -o-transition: ($property $duration $function $delay); // Opera 10.5 to 12.0
    transition: ($property $duration $function $delay);
}

@mixin box-sizing($type) {
    // http://www.w3.org/TR/css3-ui/#box-sizing
    // $type can be one of: content-box | padding-box | border-box | inherit
    -webkit-box-sizing: $type; // Chrome 4.0 to 9.0, Safari 3.1 to 5.0, Mobile Safari 3.2 to 4.3, Android Browser 2.1 to 3.0
    -moz-box-sizing: $type; // Firefox 2.0 to 28.0, Firefox for Android 26.0 onwards
    box-sizing: $type;
}

@mixin appearance($appearance) {
    -webkit-appearance: $appearance;
    -moz-appearance: $appearance;
}

@mixin calc($property, $calc) {
    #{$property}: -webkit-calc(#{$calc}); // Chrome 19.0 to 25.0, Safari 6.0, Mobile Safari 6.0 to 6.1
    #{$property}: calc(#{$calc});
}

@mixin opacity($trans) {
    //zoom: 1;
    filter: unquote('alpha(opacity=' + ($trans * 100) + ')'); // IE6 to IE8
    opacity: $trans;
}

@mixin hover-primary() {
    &:hover {
        color: $t-interaction-one-hover;
        text-decoration: underline;
    }
}

@mixin hover-secondary() {
    &:hover {
        color: $t-interaction-two-hover;
        text-decoration: none;
    }
}

@mixin active-primary() {
    &:hover {
        color: $t-interaction-one-active;
        text-decoration: underline;
    }
}

@mixin active-secondary() {
    &:hover {
        color: $t-interaction-two-active;
        text-decoration: none;
    }
}

@mixin focus-outline($offset: true) {
    &:focus {
        outline: $focus-outline-width solid $t-interaction-one-focus;
        @if $offset {
            outline-offset: 3px;
        } @else {
            outline-offset: 0px;
        }
    }
}

@mixin focus-outline-large() {
    &:focus {
        outline: $focus-outline-large-width solid $t-interaction-one-focus;
        outline-offset: 0;
    }
}

@mixin placeholder-colour($colour) {
    &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
        color: $colour !important;
    }
    &::-moz-placeholder { /* Firefox 19+ */
      color: $colour !important;
      opacity: 1;
    }
    &:-ms-input-placeholder { /* IE 10+ */
      color: $colour !important;
    }
    &:-moz-placeholder { /* Firefox 18- */
      color: $colour !important;
      opacity: 1;
    }
}

@mixin visually-hidden() {
    position: absolute !important;
    left: -99999px;
    top: -99999px;
}

@mixin inline-icon($line-height) {
    display: inline-block;
    width: $line-height;
    height: $line-height;
    margin: 0 0 0 $line-height / 8;
}

@mixin inline-icon-half($line-height) {
    display: inline-block;
    width: $line-height / 2;
    height: $line-height / 2;
    margin: 0 0 0 $line-height / 8;
}

@mixin block() {
    display: flex;
    flex-direction: column;
    height: 100%;
}

@mixin card-padding() {
    padding: $spacer-sm $spacer-xsm;
}

@mixin card-padding-large() {

    padding: $spacer-sm $spacer-xsm;

    @include respond-to(tablet){
        padding: $spacer-rg $spacer-rg;
    }

}

@mixin card-padding-very-large() {

    padding: $spacer-sm $spacer-xsm;

    @include respond-to(tablet){
        padding: $spacer-md $spacer-md;
    }

}

@mixin card-shadow() {
    box-shadow: 0 6px 10px 0 $black-tint;
}

@mixin no-margin-on-last-child() {
    & > * { // sass-lint:disable-line no-combinators no-universal-selectors
        &:last-child {
            margin-bottom: 0;
        }
    }
}

@mixin regular-heading() {
    line-height: $regular-heading-line-height;
    font-size: $regular-heading-font-size;
}

@mixin medium-heading() {
    line-height: $medium-heading-line-height;
    font-size: $medium-heading-font-size;
}

@mixin small-heading() {
    line-height: $small-heading-line-height;
    font-size: $small-heading-font-size;
}

@mixin standard-text() {
    line-height: $base-font-size-line-height;
    font-size: $base-font-size;
}

@mixin large-text() {
    line-height: $large-text-line-height;
    font-size: $large-text;
}

@mixin very-large-text() {
    line-height: $very-large-text-line-height;
    font-size: $very-large-text;
}

@function derived-dimension($multiplier) {
    @return $multiplier * $base-dimension-unit;
}
