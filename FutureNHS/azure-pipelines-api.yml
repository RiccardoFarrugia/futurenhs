# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
 branches:
    include:
    - SPRINT
 paths:
    include:
    - FutureNHS/*

jobs:
- job: CheckChangesInPaths
  displayName: 'Check commit contains changes for FutureNHS Api'
  pool:
    vmImage: 'windows-latest'
  steps: 
  - powershell: |
      $url="$(System.CollectionUri)/$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.ID)/commits/$(Build.SourceVersion)/changes?api-version=5.1"
      $result = Invoke-RestMethod -Uri $url -Headers @{Authorization = "Bearer $(System.AccessToken)"} -Method GET
                       
      $changesFolder  = $result.changes | Where-Object{$_.item.gitObjectType -match "tree"} | Select-Object -Property {$_.item.path}
     
      foreach($path in $changesFolder ){
        if($path -match '/FutureNHS'){
          echo "##vso[task.setvariable variable=FutureNHS;isOutput=true]$True"
          break
        }
      }
    name: ChangesInPaths

  variables:
   solution: 'FutureNHS.sln'
   buildPlatform: 'x64'
   buildConfiguration: 'Release'

- job: BuildFutureNHS
  displayName: 'Build and deploy artifact for FutureNHS Api'
  pool :
    vmImage: 'windows-latest'
  dependsOn: CheckChangesInPaths
  condition: eq(dependencies.CheckChangesInPaths.outputs['ChangesInPaths.FutureNHS'], 'true') 
  steps:
   - task: UseDotNet@2
     displayName: 'Set dotnet SDK to v6.0'
     inputs:
      packageType: 'sdk'
      version: '6.0.x'

   - task: DotNetCoreCLI@2
     displayName: 'Nuget restore'
     inputs:
      command: 'restore'
      projects: '$(Build.SourcesDirectory)/$(working-dir)/**/*.csproj'
      feedsToUse: 'select'

   - task: DotNetCoreCLI@2
     displayName: 'Build FutureNHS Api'
     inputs:
      command: 'build'
      configuration: 'Release'
      projects: '$(Build.SourcesDirectory)/$(working-dir)/**/*.csproj'
      feedsToUse: 'select'

# Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
   - task: DotNetCoreCLI@2
     displayName: dotnet test
     inputs:
      command: test
      arguments: '--collect:"XPlat Code Coverage'
      projects: '$(Build.SourcesDirectory)/$(working-dir)/FutureNHS.Tests/FutureNHS.Tests.csproj'
      workingDirectory: '$(Build.SourcesDirectory)/$(working-dir)'
      nobuild: true

   - script: |
       dotnet tool install -g dotnet-reportgenerator-globaltool
       reportgenerator -reports:$(Agent.HomeDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
     displayName: Create Code coverage report

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
   - task: PublishCodeCoverageResults@1
     displayName: 'Publish code coverage'
     inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
      
   - task: DotNetCoreCLI@2
     displayName: 'Publish FutureNHS Api'
     inputs:
      command: 'publish'
      configuration: 'Release'
      publishWebProjects: false
      projects: '$(Build.SourcesDirectory)/$(working-dir)/**/*.csproj'
      zipAfterPublish: false

   - task: CopyFiles@2
     displayName: 'Copy files for artifact'
     inputs:
      SourceFolder: '$(Build.SourcesDirectory)/$(working-dir)/FutureNHS.Api/bin/Debug/net6.0/publish'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

   - task: PublishPipelineArtifact@1
     displayName: 'Publish artifact'
     inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'FNHSApi'
      publishLocation: 'pipeline'
      
   - task: PowerShell@2
     displayName: 'Add RUN Tag to trigger Release'
     env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
     inputs:
      targetType: 'inline'
      script: |
       $user = ""
       $token = $env:SYSTEM_ACCESSTOKEN

       $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user,$token)))

       $org = "$(System.CollectionUri)"
       $teamProject = "$(System.TeamProject)"
       $buildId = "$(Build.BuildId)"
       $tagName = "RUN"

       $restApiUpdateBuild = "$org/$teamProject/_apis/build/builds/$buildId/tags/$tagName`?api-version=6.0"

       function InvokePutReques ($PutUrl)
       {   
           return Invoke-RestMethod -Uri $PutUrl -Method Put -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}
       }

       $result = InvokePutReques $restApiUpdateBuild
      pwsh: true
    
