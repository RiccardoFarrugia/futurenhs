trigger:
 branches:
    include:
    - SPRINT
 paths:
    include:
    - MVCForum/*

jobs:
- job: CheckChangesInPaths
  displayName: 'Check the commit contains changes for MVCForum'
  pool:
    vmImage: 'windows-latest'
  steps: 
  - powershell: |
     $buildsUrl = "$(System.CollectionUri)/$(System.TeamProject)/_apis/build/builds?resultFilter=succeeded&queryOrder=descending&api-version=6.0-preview"
     $buildsresult = Invoke-RestMethod -Uri $buildsUrl -Headers @{Authorization = "Bearer $(System.AccessToken)"} -Method GET
     
     $buildId = $buildsresult.value[0].id
     echo "Build to check from: $buildId to: $(Build.BuildId)"
     $commitsUrl = "$(System.CollectionUri)/$(System.TeamProject)/_apis/build/changes?fromBuildId=$buildId&toBuildId=$(Build.BuildId)&api-version=6.0-preview.2"
     $commitsresult = Invoke-RestMethod -Uri $commitsUrl -Headers @{Authorization = "Bearer $(System.AccessToken)"} -Method GET
     
     foreach($commit in $commitsresult.value)
     {
      echo "Checking commit for changes: $commit.id"
      $url="$(System.CollectionUri)/$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.ID)/commits/$commit.id/changes?api-version=5.1"
      $result = Invoke-RestMethod -Uri $url -Headers @{Authorization = "Bearer $(System.AccessToken)"} -Method GET
     
      $changesFolder  = $result.changes | Where-Object{$_.item.gitObjectType -match "tree"} | Select-Object -Property {$_.item.path}
     
      foreach($path in $changesFolder ){
        if($path -match '/MVCForum'){
          echo "##vso[task.setvariable variable=MVCForum;isOutput=true]$True"
          break
        }
       }
     }
    name: ChangesInPaths

- job: BuildMVCForum
  displayName: 'Build and deploy artifact'
  pool :
    vmImage: 'windows-latest'
  dependsOn: CheckChangesInPaths
  condition: eq(dependencies.CheckChangesInPaths.outputs['ChangesInPaths.MVCForum'], 'true') 
  steps:
  - task: NuGetToolInstaller@1
    inputs:
     versionSpec:

  - task: NuGetCommand@2
    displayName: 'Nuget restore'
    inputs:
     command: 'restore'
     restoreSolution: 'MVCForum/MVCForum.sln'
     feedsToUse: 'select'

  - task: NodeTool@0
    displayName: 'Install node'
    inputs:
     versionSpec: '12.22.1'
    
  - task: Cache@2
    displayName: npm Cache
    inputs:
     key: 'npmcache | "$(Agent.OS)" | $(Build.SourcesDirectory)/MVCForum/package.json'
     path: '$(Build.SourcesDirectory)/MVCForum/node_modules'
     cacheHitVar: 'npm_cache_hit'

  - task: Npm@1
    displayName: 'npm install'
    condition: ne(variables.npm_cache_hit, 'true')
    inputs:
     command: 'install'
     workingDir: '$(Build.SourcesDirectory)/MVCForum'
    
  - task: gulp@0
    displayName: 'Build front end'
    inputs:
     workingDirectory: '$(Build.SourcesDirectory)/MVCForum'
     gulpFile: '$(Build.SourcesDirectory)/MVCForum/gulpfile.js'
     targets: 'buildWeb'
     gulpjs: '$(Build.SourcesDirectory)/MVCForum/node_modules/gulp/bin/gulp.js'
     enableCodeCoverage: false

  - task: MSBuild@1
    displayName: 'Build MVCForum'
    inputs:
     solution: '$(Build.SourcesDirectory)/MVCForum/MVCForum.sln'
     msbuildArchitecture: 'x64'
     configuration: 'Release'
     createLogFile: true
     logFileVerbosity: 'diagnostic'

  - task: CopyFiles@2
    displayName: 'Copy files for artifact'
    inputs:
     SourceFolder: '$(Build.SourcesDirectory)/MVCForum/MVCForum.Website'
     Contents: '**'
     TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish artifact'
    inputs:
     targetPath: '$(Build.ArtifactStagingDirectory)'
     artifact: 'FNHS'
     publishLocation: 'pipeline'

  - task: PublishTestResults@2
    displayName: 'Publish Front End Unit Test Results'
    inputs:
     testResultsFiles: 'jest-junit.xml'
     searchFolder: '$(System.DefaultWorkingDirectory)/js-report'
     testRunTitle: 'Front End Test Run'
    continueOnError: true

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage from Front End Unit Tests'
    inputs:
     codeCoverageTool: Cobertura
     summaryFileLocation: '$(System.DefaultWorkingDirectory)/MVCForum/js-report/cobertura-coverage.xml'
     pathToSources: '$(System.DefaultWorkingDirectory)/MVCForum'
     reportDirectory: '$(System.DefaultWorkingDirectory)/MVCForum/js-report/*.htm'
     failIfCoverageEmpty: true

  - task: PowerShell@2
    displayName: 'Add RUN Tag to trigger Release'
    env:
     SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
     targetType: 'inline'
     script: |
       $user = ""
       $token = $env:SYSTEM_ACCESSTOKEN

       $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user,$token)))

       $org = "$(System.CollectionUri)"
       $teamProject = "$(System.TeamProject)"
       $buildId = "$(Build.BuildId)"
       $tagName = "RUN"

       $restApiUpdateBuild = "$org/$teamProject/_apis/build/builds/$buildId/tags/$tagName`?api-version=6.0"

       function InvokePutReques ($PutUrl)
       {   
           return Invoke-RestMethod -Uri $PutUrl -Method Put -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}
       }

       $result = InvokePutReques $restApiUpdateBuild
     pwsh: true
